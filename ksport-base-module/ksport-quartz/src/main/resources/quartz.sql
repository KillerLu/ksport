
-- 存储每一个已配置的Job的详细信息
CREATE TABLE t_qrtz_job_details (
  SCHED_NAME VARCHAR(120) NOT NULL COMMENT '调度名称',
  JOB_NAME VARCHAR(200) NOT NULL COMMENT 'job的名字',
  JOB_GROUP VARCHAR(200) NOT NULL COMMENT 'job的所属组的名字',
  DESCRIPTION VARCHAR(250) NULL COMMENT '相关介绍',
  JOB_CLASS_NAME VARCHAR(250) NOT NULL COMMENT 'job实现类的完全包名',
  IS_DURABLE VARCHAR(1) NOT NULL COMMENT '是否持久化,1为是',
  IS_NONCONCURRENT VARCHAR(1) NOT NULL COMMENT '是否并发',
  IS_UPDATE_DATA VARCHAR(1) NOT NULL COMMENT '是否更新数据',
  REQUESTS_RECOVERY VARCHAR(1) NOT NULL COMMENT '是否接受恢复执行，默认为false，设置了RequestsRecovery为true，则该job会被重新执行',
  JOB_DATA BLOB NULL COMMENT '存放持久化job对象',
  PRIMARY KEY (SCHED_NAME,JOB_NAME,JOB_GROUP))
  ENGINE=InnoDB;
ALTER TABLE t_qrtz_job_details COMMENT = '存储每一个已配置的 jobDetail 的详细信息';
-- 存储已配置的Trigger的信息
CREATE TABLE t_qrtz_triggers (
  SCHED_NAME VARCHAR(120) NOT NULL COMMENT '调度名称',
  TRIGGER_NAME VARCHAR(200) NOT NULL COMMENT '触发器的名字',
  TRIGGER_GROUP VARCHAR(200) NOT NULL COMMENT '触发器所属组的名字',
  JOB_NAME VARCHAR(200) NOT NULL COMMENT 't_qrtz_job_details表job_name的外键 ',
  JOB_GROUP VARCHAR(200) NOT NULL COMMENT 't_qrtz_job_details表job_group的外键',
  DESCRIPTION VARCHAR(250) NULL COMMENT '相关介绍',
  NEXT_FIRE_TIME BIGINT(13) NULL COMMENT '下一次触发时间，默认为-1，意味不会自动触发',
  PREV_FIRE_TIME BIGINT(13) NULL COMMENT '上一次触发时间（毫秒）',
  PRIORITY INTEGER NULL COMMENT '优先级',
  TRIGGER_STATE VARCHAR(16) NOT NULL COMMENT '当前触发器状态，设置为ACQUIRED,如果设置为WAITING,则job不会触发 （ WAITING:等待 PAUSED:暂停ACQUIRED:正常执行 BLOCKED：阻塞 ERROR：错误）',
  TRIGGER_TYPE VARCHAR(8) NOT NULL COMMENT '触发器类型,使用cron表达式 ',
  START_TIME BIGINT(13) NOT NULL COMMENT '开始时间',
  END_TIME BIGINT(13) NULL COMMENT '结束时间',
  CALENDAR_NAME VARCHAR(200) NULL COMMENT '日程表名称，t_qrtz_calendars表的calendar_name字段外键',
  MISFIRE_INSTR SMALLINT(2) NULL COMMENT '措施或者是补偿执行的策略',
  JOB_DATA BLOB NULL COMMENT '存放持久化job对象',
  PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
  FOREIGN KEY (SCHED_NAME,JOB_NAME,JOB_GROUP)
  REFERENCES t_qrtz_job_details(SCHED_NAME,JOB_NAME,JOB_GROUP))
  ENGINE=InnoDB;
ALTER TABLE t_qrtz_triggers COMMENT = '保存触发器的基本信息';

-- 存储已配置的Simple Trigger的信息
CREATE TABLE t_qrtz_simple_triggers (
  SCHED_NAME VARCHAR(120) NOT NULL COMMENT '调度名称',
  TRIGGER_NAME VARCHAR(200) NOT NULL COMMENT 't_qrtz_triggers表trigger_name的外键',
  TRIGGER_GROUP VARCHAR(200) NOT NULL COMMENT 't_qrtz_triggers表trigger_group的外键',
  REPEAT_COUNT BIGINT(7) NOT NULL COMMENT '重复的次数统计',
  REPEAT_INTERVAL BIGINT(12) NOT NULL COMMENT '重复的间隔时间',
  TIMES_TRIGGERED BIGINT(10) NOT NULL COMMENT '已经触发的次数',
  PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
  FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
  REFERENCES t_qrtz_triggers(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP))
  ENGINE=InnoDB;
ALTER TABLE t_qrtz_simple_triggers COMMENT = '存储简单的 Trigger，包括重复次数，间隔，以及已触发的次数';
-- 存储Cron Trigger，包括Cron表达式和时区信息
CREATE TABLE t_qrtz_cron_triggers (
  SCHED_NAME VARCHAR(120) NOT NULL COMMENT '调度名称',
  TRIGGER_NAME VARCHAR(200) NOT NULL COMMENT 't_qrtz_triggers表trigger_name的外键',
  TRIGGER_GROUP VARCHAR(200) NOT NULL COMMENT 't_qrtz_triggers表trigger_group的外键',
  CRON_EXPRESSION VARCHAR(120) NOT NULL COMMENT 'cron表达式',
  TIME_ZONE_ID VARCHAR(80) COMMENT '时区ID',
  PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
  FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
  REFERENCES t_qrtz_triggers(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP))
  ENGINE=InnoDB;
ALTER TABLE t_qrtz_triggers COMMENT = '存储触发器的cron表达式表';

CREATE TABLE t_qrtz_simprop_triggers
(
  SCHED_NAME VARCHAR(120) NOT NULL COMMENT '调度名称',
  TRIGGER_NAME VARCHAR(200) NOT NULL COMMENT 't_qrtz_triggers表trigger_name的外键',
  TRIGGER_GROUP VARCHAR(200) NOT NULL COMMENT 't_qrtz_triggers表trigger_group的外键',
  STR_PROP_1 VARCHAR(512) NULL COMMENT 'String类型的trigger的第一个参数',
  STR_PROP_2 VARCHAR(512) NULL COMMENT 'String类型的trigger的第二个参数',
  STR_PROP_3 VARCHAR(512) NULL COMMENT 'String类型的trigger的第三个参数',
  INT_PROP_1 INT NULL COMMENT 'int类型的trigger的第一个参数',
  INT_PROP_2 INT NULL COMMENT 'int类型的trigger的第二个参数',
  LONG_PROP_1 BIGINT NULL COMMENT 'long类型的trigger的第一个参数',
  LONG_PROP_2 BIGINT NULL COMMENT 'long类型的trigger的第二个参数',
  DEC_PROP_1 NUMERIC(13,4) NULL COMMENT 'decimal类型的trigger的第一个参数',
  DEC_PROP_2 NUMERIC(13,4) NULL COMMENT 'decimal类型的trigger的第二个参数',
  BOOL_PROP_1 VARCHAR(1) NULL COMMENT 'Boolean类型的trigger的第一个参数',
  BOOL_PROP_2 VARCHAR(1) NULL COMMENT 'Boolean类型的trigger的第二个参数',
  PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
  FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
  REFERENCES t_qrtz_triggers(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP))
  ENGINE=InnoDB;
ALTER TABLE t_qrtz_simprop_triggers COMMENT = '存储CalendarIntervalTrigger和DailyTimeIntervalTrigger两种类型的触发器';
--  Trigger作为Blob类型存储(用于Quartz用户用JDBC创建他们自己定制的Trigger类型，JobStore并不知道如何存储实例的时候)
CREATE TABLE t_qrtz_blob_triggers (
  SCHED_NAME VARCHAR(120) NOT NULL COMMENT '调度名称',
  TRIGGER_NAME VARCHAR(200) NOT NULL COMMENT 't_qrtz_triggers表trigger_name的外键',
  TRIGGER_GROUP VARCHAR(200) NOT NULL COMMENT 't_qrtz_triggers表trigger_group的外键',
  BLOB_DATA BLOB NULL COMMENT '保存triggers 一些信息',
  PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
  INDEX (SCHED_NAME,TRIGGER_NAME, TRIGGER_GROUP),
  FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
  REFERENCES t_qrtz_triggers(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP))
  ENGINE=InnoDB;
ALTER TABLE t_qrtz_blob_triggers COMMENT = '作为 Blob 类型存储(用于 Quartz 用户用 JDBC创建他们自己定制的 Trigger 类型，JobStore 并不知道如何存储实例的时候)';

-- 以Blob类型存储Quartz的Calendar日历信息,quartz可配置一个日历来指定一个时间范围
CREATE TABLE t_qrtz_calendars (
  SCHED_NAME VARCHAR(120) NOT NULL COMMENT '调度名称',
  CALENDAR_NAME VARCHAR(200) NOT NULL COMMENT '触发器名称',
  CALENDAR BLOB NOT NULL COMMENT '保存Calendar 一些信息',
  PRIMARY KEY (SCHED_NAME,CALENDAR_NAME))
  ENGINE=InnoDB;
ALTER TABLE t_qrtz_calendars COMMENT = '以 Blob 类型存储 Quartz 的 Calendar 信息';

-- 存储已暂停的Trigger组的信息
CREATE TABLE t_qrtz_paused_trigger_grps (
  SCHED_NAME VARCHAR(120) NOT NULL COMMENT '调度名称',
  TRIGGER_GROUP VARCHAR(200) NOT NULL COMMENT 't_qrtz_triggers表trigger_group的外键',
  PRIMARY KEY (SCHED_NAME,TRIGGER_GROUP))
  ENGINE=InnoDB;
ALTER TABLE t_qrtz_paused_trigger_grps COMMENT = '存储已暂停的 Trigger 组的信息';

-- 存储与已触发的Trigger相关的状态信息，以及相联Job的执行信息
CREATE TABLE t_qrtz_fired_triggers (
  SCHED_NAME VARCHAR(120) NOT NULL COMMENT '调度名称',
  ENTRY_ID VARCHAR(95) NOT NULL COMMENT '调度器实例id',
  TRIGGER_NAME VARCHAR(200) NOT NULL COMMENT 't_qrtz_triggers表trigger_name的外键',
  TRIGGER_GROUP VARCHAR(200) NOT NULL COMMENT 't_qrtz_triggers表trigger_group的外键',
  INSTANCE_NAME VARCHAR(200) NOT NULL COMMENT '调度器实例名',
  FIRED_TIME BIGINT(13) NOT NULL COMMENT '触发的时间',
  SCHED_TIME BIGINT(13) NOT NULL COMMENT '定时器制定的时间',
  PRIORITY INTEGER NOT NULL COMMENT '优先级',
  STATE VARCHAR(16) NOT NULL COMMENT '状态',
  JOB_NAME VARCHAR(200) NULL COMMENT 'job的名字',
  JOB_GROUP VARCHAR(200) NULL COMMENT 'job的所属组的名字',
  IS_NONCONCURRENT VARCHAR(1) NULL COMMENT '是否并发',
  REQUESTS_RECOVERY VARCHAR(1) NULL COMMENT '是否接受恢复执行，默认为false，设置了RequestsRecovery为true，则会被重新执行',
  PRIMARY KEY (SCHED_NAME,ENTRY_ID))
  ENGINE=InnoDB;
ALTER TABLE t_qrtz_fired_triggers COMMENT = '存储与已触发的 Trigger 相关的状态信息，以及相联 Job的执行信息';

-- 存储少量的有关 Scheduler的状态信息，和别的 Scheduler 实例(假如是用于一个集群中)
CREATE TABLE t_qrtz_scheduler_state (
  SCHED_NAME VARCHAR(120) NOT NULL COMMENT '调度名称',
  INSTANCE_NAME VARCHAR(200) NOT NULL COMMENT '配置文件中org.quartz.scheduler.instanceId配置的名字，就会写入该字段，如果设置为AUTO,quartz会根据物理机名和当前时间产生一个名字',
  LAST_CHECKIN_TIME BIGINT(13) NOT NULL COMMENT '上次检查时间',
  CHECKIN_INTERVAL BIGINT(13) NOT NULL COMMENT '检查间隔时间',
  PRIMARY KEY (SCHED_NAME,INSTANCE_NAME))
  ENGINE=InnoDB;
ALTER TABLE t_qrtz_scheduler_state COMMENT = '存储集群中note实例信息，quartz会定时读取该表的信息判断集群中每个实例的当前状态';
-- 存储程序的非观锁的信息(假如使用了悲观锁)
CREATE TABLE t_qrtz_locks (
  SCHED_NAME VARCHAR(120) NOT NULL COMMENT '调度名称',
  LOCK_NAME VARCHAR(40) NOT NULL COMMENT '悲观锁名称',
  PRIMARY KEY (SCHED_NAME,LOCK_NAME))
  ENGINE=InnoDB;
ALTER TABLE t_qrtz_locks COMMENT = '存储程序的悲观锁的信息(假如使用了悲观锁)';

CREATE INDEX IDX_QRTZ_J_REQ_RECOVERY ON t_qrtz_job_details(SCHED_NAME,REQUESTS_RECOVERY);
CREATE INDEX IDX_QRTZ_J_GRP ON t_qrtz_job_details(SCHED_NAME,JOB_GROUP);
CREATE INDEX IDX_QRTZ_T_J ON t_qrtz_triggers(SCHED_NAME,JOB_NAME,JOB_GROUP);
CREATE INDEX IDX_QRTZ_T_JG ON t_qrtz_triggers(SCHED_NAME,JOB_GROUP);
CREATE INDEX IDX_QRTZ_T_C ON t_qrtz_triggers(SCHED_NAME,CALENDAR_NAME);
CREATE INDEX IDX_QRTZ_T_G ON t_qrtz_triggers(SCHED_NAME,TRIGGER_GROUP);
CREATE INDEX IDX_QRTZ_T_STATE ON t_qrtz_triggers(SCHED_NAME,TRIGGER_STATE);
CREATE INDEX IDX_QRTZ_T_N_STATE ON t_qrtz_triggers(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP,TRIGGER_STATE);
CREATE INDEX IDX_QRTZ_T_N_G_STATE ON t_qrtz_triggers(SCHED_NAME,TRIGGER_GROUP,TRIGGER_STATE);
CREATE INDEX IDX_QRTZ_T_NEXT_FIRE_TIME ON t_qrtz_triggers(SCHED_NAME,NEXT_FIRE_TIME);
CREATE INDEX IDX_QRTZ_T_NFT_ST ON t_qrtz_triggers(SCHED_NAME,TRIGGER_STATE,NEXT_FIRE_TIME);
CREATE INDEX IDX_QRTZ_T_NFT_MISFIRE ON t_qrtz_triggers(SCHED_NAME,MISFIRE_INSTR,NEXT_FIRE_TIME);
CREATE INDEX IDX_QRTZ_T_NFT_ST_MISFIRE ON t_qrtz_triggers(SCHED_NAME,MISFIRE_INSTR,NEXT_FIRE_TIME,TRIGGER_STATE);
CREATE INDEX IDX_QRTZ_T_NFT_ST_MISFIRE_GRP ON t_qrtz_triggers(SCHED_NAME,MISFIRE_INSTR,NEXT_FIRE_TIME,TRIGGER_GROUP,TRIGGER_STATE);
CREATE INDEX IDX_QRTZ_FT_TRIG_INST_NAME ON t_qrtz_fired_triggers(SCHED_NAME,INSTANCE_NAME);
CREATE INDEX IDX_QRTZ_FT_INST_JOB_REQ_RCVRY ON t_qrtz_fired_triggers(SCHED_NAME,INSTANCE_NAME,REQUESTS_RECOVERY);
CREATE INDEX IDX_QRTZ_FT_J_G ON t_qrtz_fired_triggers(SCHED_NAME,JOB_NAME,JOB_GROUP);
CREATE INDEX IDX_QRTZ_FT_JG ON t_qrtz_fired_triggers(SCHED_NAME,JOB_GROUP);
CREATE INDEX IDX_QRTZ_FT_T_G ON t_qrtz_fired_triggers(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP);
CREATE INDEX IDX_QRTZ_FT_TG ON t_qrtz_fired_triggers(SCHED_NAME,TRIGGER_GROUP);
commit;